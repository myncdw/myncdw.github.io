<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符串转Unicode</title>
      <link href="/2023/12/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8CUnicode%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/12/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8CUnicode%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串转Unicode（python）"><a href="#字符串转Unicode（python）" class="headerlink" title="字符串转Unicode（python）"></a>字符串转Unicode（python）</h1><h2 id="为什么要做这个"><a href="#为什么要做这个" class="headerlink" title="为什么要做这个"></a>为什么要做这个</h2><p>事情的起因很简单，我买了一张专辑，叫做“繋(jì)宙歌”，然后这个“繋”字我在微软输入法里面怎么都找不到，最后我就想着能不能用Unicode的方式把它打出来</p><h2 id="在知道Unicode码的情况下怎么打出这个字"><a href="#在知道Unicode码的情况下怎么打出这个字" class="headerlink" title="在知道Unicode码的情况下怎么打出这个字"></a>在知道Unicode码的情况下怎么打出这个字</h2><p>非常简单，只需要输入“VUC”然后紧接着直接输入对应的Unicode码即可（十六进制）</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h3 id="字符串转Unicode"><a href="#字符串转Unicode" class="headerlink" title="字符串转Unicode"></a>字符串转Unicode</h3><p>首先介绍一个基本的函数：<code>ord()</code>：返回一个字符的ASCII码数值</p><p>举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;东&#x27;</span></span><br><span class="line">result = <span class="built_in">ord</span>(word)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>这样它就会输出“东”这个字的ASCII编码值，是19996</p><p>但是前面说了，VUC只能用十六进制，所以我们还要转为16进制</p><p>这里再介绍一个基本的函数：<code>hex()</code></p><p>它的作用就很简单了，就是将整数转换为十六进制字符串</p><p>所以完整的代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;东&#x27;</span></span><br><span class="line">result = <span class="built_in">hex</span>(<span class="built_in">ord</span>(word))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>这样就会输出对应的十六进制的Unicode码，为0x4e1c</p><h3 id="Unicode转字符串"><a href="#Unicode转字符串" class="headerlink" title="Unicode转字符串"></a>Unicode转字符串</h3><p>首先要了解一个基本的函数：<code>chr()</code>：将整数转换为对应的ASCII字符</p><p>举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicode = <span class="number">19996</span></span><br><span class="line">word = <span class="built_in">chr</span>(unicode)</span><br><span class="line"><span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure><p>这样他就会输出“东”</p><p>但是如果你只知道这个字的十六进制的Unicode编码的话，这个方法就不太行了</p><p>所以我们可以使用这个函数：<code>eval()</code>：执行一个字符串表达式，并返回表达式的值</p><p>它可以执行字符串里面的代码，如:</p><p><code>eval(&quot;print(&#39;1&#39;)&quot;)</code>输出的就是1</p><p>或者单纯的把参数中最外层引号去掉</p><p>这里我们要的是十六进制的数字，所以直接使用<code>int()</code>是不行的</p><p>我们要稍微做一个修改</p><p><code>int(x, 16)</code></p><p>x就是你的数字，16就是对应的进制，比如：<code>int(&#39;4e1c&#39;, 16)</code></p><p>所以完整的代码就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unicode = <span class="built_in">int</span>(<span class="string">&#x27;4e1c&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">Unicode = <span class="built_in">hex</span>(Unicode)</span><br><span class="line">Unicode = <span class="built_in">eval</span>(Unicode)</span><br><span class="line">word = <span class="built_in">chr</span>(Unicode)</span><br><span class="line"><span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure><p>这样，它就会输出东这个字了</p><p>那么问题来了，明明我已经存储了对应的十六进制码了，为什么我还要转换这么多次呢？</p><p>1.虽然我们存储的是十六进制的数据，但是他还是属于int类型，而eval传入只能是str类型</p><p>2.如果使用str类型，就会报错invalid decimal literal，在这里是因为python默认识别的是10进制，然而十进制中并没有字母，如果恰好你的Unicode中没有字母，那么它的值也发生的变化</p><p>3.用<code>hex()</code>可以完美的避开上面的问题</p><h3 id="现成能用的下载链接"><a href="#现成能用的下载链接" class="headerlink" title="现成能用的下载链接"></a>现成能用的下载链接</h3><p><a href="https://github.com/myncdw/str2unicode/releases">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证器</title>
      <link href="/2023/12/23/%E9%AA%8C%E8%AF%81%E5%99%A8/"/>
      <url>/2023/12/23/%E9%AA%8C%E8%AF%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之前身边的人收到了一些类似于辅助验证一样的诈骗信息，为此，我做了一个验证是否是我自己发出信息的小工具（就是不太实用）</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://myncdw.top/%E9%AA%8C%E8%AF%81%E5%99%A8/%E9%AA%8C%E8%AF%81%E7%B3%BB%E7%BB%9F1.1.4.zip">验证器下载—七牛云</a></p><p><a href="https://github.com/myncdw/Personal_authenticator/releases">验证器下载—GitHub</a></p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>1.打开此程序</p><p>2.输入收到的6位验证信息，它通常在信息的末尾</p><p>3.程序会跳转的对应的验证区域，请选择与开头最相似的那个然后复制到程序中</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在python中实现AES加密</title>
      <link href="/2023/12/23/python%20AES%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/12/23/python%20AES%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在网络通信和数据存储中，保护敏感信息的安全性至关重要。Python中的cryptography库提供了一种强大而简单的方法，通过其Fernet加密算法，可以轻松加密和解密文本信息。本文将介绍如何使用cryptography库的Fernet模块创建一个简单的文本加密工具。</p><h1 id="安装cryptography库"><a href="#安装cryptography库" class="headerlink" title="安装cryptography库"></a>安装cryptography库</h1><p>首先，确保你的Python环境中已经安装了cryptography库。如果未安装，可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cryptography</span><br></pre></td></tr></table></figure><p>如果遇到问题可以参考以下的文章：</p><p><a href="https://blog.csdn.net/lavender_dream/article/details/109442618">安装cryptography报错：Failed building wheel for cryptography-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/376354994">pip安装cryptography时出错，怎么解决？ - 知乎 (zhihu.com)</a></p><p>[Python 安装Python Cryptography包失败解决方案|极客教程 (geek-docs.com)</p><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>创建一个Python脚本，我们将在其中使用cryptography库的Fernet来进行文本加密和解密。下面是一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>():</span><br><span class="line">    <span class="keyword">return</span> Fernet.generate_key()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_text</span>(<span class="params">key, plaintext</span>):</span><br><span class="line">    cipher = Fernet(key)</span><br><span class="line">    encrypted_text = cipher.encrypt(plaintext.encode())</span><br><span class="line">    <span class="keyword">return</span> encrypted_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_text</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    cipher = Fernet(key)</span><br><span class="line">    decrypted_text = cipher.decrypt(ciphertext).decode()</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，演示加密和解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 生成密钥</span></span><br><span class="line">    key = generate_key()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 待加密的文本</span></span><br><span class="line">    plaintext = <span class="string">&quot;Hello, cryptography!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密文本</span></span><br><span class="line">    ciphertext = encrypt_text(key, plaintext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Encrypted Text: <span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密文本</span></span><br><span class="line">    decrypted_text = decrypt_text(key, ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted Text: <span class="subst">&#123;decrypted_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><a href="https://github.com/myncdw/py-AES/releases/tag/py-AES">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
